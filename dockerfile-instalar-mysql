#para instalar dependencias dentro de los contenedores
#en este caso el mysql driver para el PDO

#usando la ultima imagen
FROM php:apache

#mandando una senal
RUN echo "Hola desde dockerfile"

#instalalndo el PDO Mysql Driver
RUN docker-php-ext-install pdo_mysql


#se usa el commando docker-compose build (docker-compose up --build [para forzar])
#para la reconstruccion de la imagne usando los parametros qeuridos
#en este caso, para que la nueva imagen contenga el driver pdo_mysql
#despues del docker-compose build se usa docker-compose up -d para iniciar la imagen




#------------MUESTRA SOLO LO QUE HAY DENTRO DE LA CARPETA ESPECIFICA -------------------
#cambiar la carpeta root para que la carpeta /public/ (en vscode) sea contenga el document root
#esto es para que no puedan acceder a datos fuera del folder /public/ 
# para que solo lo que esta en la carpeta ./public sea visible y lo demas no (./otros)
# /public
#   ->index.php
#   ->hola.php    
#/otros
#   ->helpers.php
#   ->form.php

#solo se mostrara el contenido de la carpeta /public. 
#asi se podra acceder a localhost:port/index y localhost:port/hola.php

#en lugar de poner un nombre largo y que se pueda acceder a carpetas no deseadas
# localhost:port/public/index.php  o   localhost:port/public/hola.php
# localhost:port/otros/helpers.php o localhost:port/otros/form.php 



#moving using PUBLIC files only------------------------------------
# it sets the environment variable APACHE_DOCUMENT_ROOT to /var/www/html/public.
# It uses the sed command to replace all occurrences of /var/www/html in Apache's configuration files with the value of the APACHE_DOCUMENT_ROOT variable (/var/www/html/public).
#Overall, these commands modify Apache's configuration to use the specified document root (/var/www/html/public) instead of the default (/var/www/html).
#se crea la variable del nuevo directorio
ENV APACHE_DOCUMENT_ROOT=/var/www/html/public
#This replaces all mentions to /var/www/html in Apache's configuration, to /var/www/html/public
RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf
RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf


# ACTIVANDO ROUTERS_----------------------------------------------------------------
#activando modulos de apache (mod routers)
RUN a2enmod rewrite


# #installing composer-----------------------------------

# #allow super user-set this if you use composer as a super user at all times
# #like in docker containers
# ENV COMPOSER_ALLOW_SUPERUSER=1

# #Obtain composer using muti-stoge build
# COPY --from=composer:latest /user/bin/composer urs/bin/composer

# #here we are copying only composer.json and composer.lock

# #right before doing composer install
# #composer install will be executed only when composer.json or composer.lock have indeed changed
# COPY ./composer.* ./
# #install
# RUN composer install --prefer-dist --no-dev --no-scripts --no-progess --no-interaction

# #copy application files to working directory
# COPY ./ .

# #run composer 
# RUN composer dump-autoload --optimize


# # Download and install Composer
# ENV COMPOSER_ALLOW_SUPERUSER=1
# # COPY --from=composer /usr/bin/composer /usr/bin/composer
# # RUN composer install
# COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer
# Install dependencies


ENV COMPOSER_ALLOW_SUPERUSER=1
COPY --from=composer /usr/bin/composer /usr/bin/composer
COPY ./composer.* ./
RUN composer install --prefer-dist --no-dev --no-scripts --no-progress --no-interaction
COPY . .
RUN composer dump-autoload --optimize