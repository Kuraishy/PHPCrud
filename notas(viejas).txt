//including files in PHP

- include = if it fails, it will throw a warning and continue to execute the script

- require = will include a file and if it fails, it will throw a fatal error and stop executing the script

- include_once = will include only one, if it has already been included, it will not include it again.

- require_once = if it has already been included, it will not include it again

//cambiar index al folder public
//chanign document root to public
//en  sd el docker file
#cambiar la carpeta root para que la carpeta /public/ sea contenga el document root
#esto es para que no puedan acceder a datos fuera del folder /public/ 
# para que solo lo public sea visible y lo demas no

#se crea la variable del nuevo directorio
ENV APACHE_DOCUMENT_ROOT=/var/www/html/public
#This replaces all mentions to /var/www/html in Apache's configuration, to /var/www/html/public
RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf
RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf


///////////ROUTING//////////////////
-usando docker
en el dockerfile de php se le agrega para la activacion de modulos
#activando modulos de apache
RUN a2enmod rewrite

en la carpeta public se crea un documento .htaccess que contenga:
    #This directive enables the rewriting engine for URL rewriting.
    RewriteEngine on
    #checks if the requested URL does not map to an existing file.
    RewriteCond %{REQUEST_FILENAME} !-f
    #checks if the requested URL does not map to an existing directory.
    RewriteCond %{REQUEST_FILENAME} !-d
    #This rule captures the requested URL path (excluding the domain) using the regular expression
    #^(.*)$ and redirects it to /index.php. Let's break down the flags used:
    #   [NC]: This flag makes the pattern matching case-insensitive.
    #   [L]: This flag indicates that if the rule matches, no further rules should be processed.
    #   [QSA]: This flag stands for "query string append" and instructs Apache to append the query string from the original request to the rewritten URL.
    RewriteRule ^(.*)$ /index.php [NC,L,QSA]




///CONFIGURACION DE ROUTES//
.htaccess vs apache server config 

-   ambos sirven para activar las routes en apache php
-   apache confiuration file es mas rapido que el .htaccess
-   el .htaccess es mas facil de configurar y no se ve el impacto en paginas de low trafic
-  if you have administrative access to the server and require centralized control over 
  configuration settings, 
  it's generally preferable to use Apache server configuration files.
-   If you need flexibility and want users to have the ability to customize settings
    for their directories independently, .htaccess files can be a convenient option, 
    but be mindful of the potential performance and security implications.

Apache Server Configuration File:
    Pros:
        Performance: have better performance compared to .htaccess files because they 
        are read once during server startup, whereas .htaccess files are 
        read for every request.

        Centralized Control: centralized control over configuration settings 
        for the entire server or specific virtual hosts.

        Security: Since .htaccess files can be overridden by users, 
        placing configuration directives in the main server configuration 
        can enhance security by restricting the ability to modify settings.

    Cons:
        Requires Server Access: which may not always be practical,
        especially in shared hosting environments 

        Restart Required: Changes to the main server configuration require to be restarted

.htaccess File:

    Pros:
        Flexibility: allowing configuration settings to be applied on a per-directory
        basis without requiring server-wide changes.

        Ease of Use: changes take effect immediately without needing to restart Apache.

        User-Specific Configuration: Users with access to .htaccess files
        (e.g., website owners) can customize configuration settings 
        for their directories without affecting other users or the server as a whole.

    Cons:
        Performance Overhead: Apache must read and parse for every request, 
        which can incur a performance overhead, especially on high-traffic sites.

        Security Concerns: Allowing users to override server configuration settings via.
        htaccess files can pose security risks if not properly managed.


APACHE CONFIGURATION File

//config file
Create a file named myapp.conf in a directory called apache-config (you can name them as per your preference):

<VirtualHost *:80>
    ServerName myapp.local
    DocumentRoot /var/www/html

    <Directory /var/www/html>
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>

//DOCKER FILE
FROM php:apache
COPY ./src /var/www/html
COPY ./apache-config/myapp.conf /etc/apache2/sites-available/myapp.conf
RUN a2ensite myapp.conf
